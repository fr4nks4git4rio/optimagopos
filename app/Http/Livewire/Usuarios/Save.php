<?php

namespace App\Http\Livewire\Usuarios;

use App\Http\Livewire\Layouts\Modal;
use App\Models\Cliente;
use App\Models\Role;
use App\Models\User;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;

class Save extends Modal
{
    use WithFileUploads;

    public $scope = null;

    public User $user;
    public $avatar;
    public $email;
    public $nombre;
    public $apellidos;
    public $rol_id;
    public $cliente_id;
    public $password;
    public $password_confirmation;
    public $avatar_src;
    public $roles = [];

    protected $listeners = ['$refresh'];

    public function mount()
    {

        $this->avatar = isset($this->user) ? $this->user->avatar_uri : '';
        $this->email = isset($this->user) ? $this->user->email : '';
        $this->nombre = isset($this->user) ? $this->user->nombre : '';
        $this->apellidos = isset($this->user) ? $this->user->apellidos : '';
        $this->rol_id = isset($this->user) ? $this->user->rol_id : '';
        $this->cliente_id = isset($this->user) ? $this->user->cliente_id : '';
        $this->avatar_src = $this->avatar;
        if (!isset($this->user)) {
            $this->user = new User();
        }

        $this->roles = DB::table('tb_roles')->select('id as value', 'nombre as label')->get()->map(function ($element) {
            return (array) $element;
        })->toArray();
    }

    public static function modalMaxWidthClass(): string
    {
        return 'modal-xl'; // TODO: Change the autogenerated stub
    }

    public function render()
    {
        return view('livewire.usuarios.save');
    }

    public function getWithScopeProperty()
    {
        return $this->scope != null;
    }

    public function save()
    {
        $rules = $this->user->rules();
        $messages = $this->user->messages();
        $data = $this->validate($rules, $messages);
        if ($data['password'] && trim($data['password']) != "") {
            $data['password'] = Hash::make($data['password']);
        } else {
            Arr::forget($data, ['password']);
        }

        $this->user->fill($data)->save();

        if ($this->avatar && !is_string($this->avatar)) {
            $ext = $this->avatar->extension();
            $nombre = Str::uuid() . ".$ext";
            $this->avatar->storeAs('', $nombre, 'avatars');
            $this->user->avatar = $nombre;
        } else if ($this->avatar == '' || $this->avatar == null) {
            if ($this->user->avatar && Storage::disk('avatars')->exists($this->user->avatar)) {
                Storage::disk('avatars')->delete($this->user->avatar);
            }
            $this->user->avatar = null;
        }
        $this->user->save();

        $this->emit('show-toast', 'Usuario guardado.');
        $this->emit('$refresh');
        $this->emit('closeModal');
    }

    public function hydrate()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function updated()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function init()
    {
        if ($this->cliente_id) {
            $cliente = Cliente::find($this->cliente_id);
            $nombre = Crypt::decrypt($cliente->nombre_comercial);
            $this->dispatchBrowserEvent("set-data-cliente_id", ['data' => [['id' => $cliente->id, 'text' => $nombre]], 'term' => '', 'value' => $cliente->id]);
        }
    }

    public function removePhoto()
    {
        $this->avatar = '';
    }

    public function getHasAvatarProperty()
    {
        return $this->avatar != '';
    }
}
