<?php

namespace App\Http\Livewire\Clientes;

use App\Http\Livewire\Layouts\Modal;
use App\Models\RegimenFiscal;
use App\Models\Direccion;
use App\Models\Estado;
use App\Models\Localidad;
use App\Models\Municipio;
use App\Models\Cliente;
use App\Rules\RfcRule;
use App\Rules\RuleUnique;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class Save extends Modal
{
    public $scope = null;
    public Cliente $cliente;
    public $nombre_comercial;
    public $razon_social;
    public $rfc;
    public $correo;
    public $telefono;
    public $comentarios;
    public $regimen_fiscal_id;
    public $direccion_fiscal;

    public $regimenesFiscales = [];
    public $estados = [];

    protected $listeners = ['$refresh'];

    public function mount()
    {
        $this->regimenesFiscales = RegimenFiscal::orderBy('codigo')->get()->map->only('label', 'value');

        if (!isset($this->cliente)) {
            $this->cliente = new Cliente();
        } else {
            $this->cliente = Cliente::decryptInfo($this->cliente);
            $this->nombre_comercial = $this->cliente->nombre_comercial;
            $this->razon_social = $this->cliente->razon_social;
            $this->rfc = $this->cliente->rfc;
            $this->correo = $this->cliente->correo;
            $this->telefono = $this->cliente->telefono;
            $this->regimen_fiscal_id = $this->cliente->regimen_fiscal_id;
        }
        $this->direccion_fiscal = $this->cliente->direccion_fiscal->toArray();
        $this->estados = get_estados_mexico();
    }

    public static function modalMaxWidthClass(): string
    {
        return 'modal-xl'; // TODO: Change the autogenerated stub
    }

    public function render()
    {
        return view('livewire.clientes.save');
    }

    public function getWithScopeProperty()
    {
        return $this->scope != null;
    }

    public function hydrate()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function updated()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function rules()
    {
        $collection = DB::table('tb_clientes')
            ->select('id', 'nombre_comercial', 'razon_social', 'rfc', DB::raw('0 as decrypted'))
            ->get();
        $collection->map(function ($cliente) {
            $cliente = Cliente::decryptInfo($cliente);
        });
        $tipo_persona = 'ambas';
        if ($this->regimen_fiscal_id) {
            if ($this->regimen_fiscal_id == 9)
                $tipo_persona = 'persona_fisica';
            else
                $tipo_persona = 'persona_moral';
        }
        return [
            'nombre_comercial' => ['required', new RuleUnique($collection, $this->cliente->id)],
            'razon_social' => ['required', new RuleUnique($collection, $this->cliente->id)],
            'rfc' => ['required', new RuleUnique($collection, $this->cliente->id), new RfcRule($tipo_persona)],
            'correo' => ['required'],
            'telefono' => ['nullable'],
            'comentarios' => ['nullable'],
            'regimen_fiscal_id' => ['nullable'],
            'direccion_fiscal.codigo_postal' => ['required'],
            'direccion_fiscal.calle' => 'nullable',
            'direccion_fiscal.no_exterior' => 'nullable',
            'direccion_fiscal.no_interior' => 'nullable',
            'direccion_fiscal.colonia' => 'nullable',
            'direccion_fiscal.localidad_id' => 'nullable',
            'direccion_fiscal.municipio_id' => 'nullable',
            'direccion_fiscal.estado_id' => 'nullable',
            'direccion_fiscal.referencia' => 'nullable'
        ];
    }

    public function messages()
    {
        return [
            'nombre_comercial.required' => 'Campo requerido',
            'razon_social.required' => 'Campo requerido',
            'rfc.required' => 'Campo requerido',
            'correo.required' => 'Campo requerido',
            'direccion_fiscal.codigo_postal.required' => 'Campo requerido.'
        ];
    }

    public function save()
    {
        $data = $this->validate($this->rules(), $this->messages());
        DB::beginTransaction();
        try {
            $data['rfc'] = strtoupper(str_replace(' ', '', $data['rfc']));
            $data['es_comensal'] = 0;
            $data = Cliente::encryptInfo($data);

            $this->cliente->fill(Arr::only($data, [
                'nombre_comercial',
                'razon_social',
                'rfc',
                'correo',
                'telefono',
                'es_comensal',
                'regimen_fiscal_id'
            ]))->save();

            if ($this->cliente->direccion_fiscal()->exists()) {
                $this->cliente->direccion_fiscal->fill([
                    'calle' => $data['direccion_fiscal']['calle'],
                    'no_exterior' => $data['direccion_fiscal']['no_exterior'],
                    'no_interior' => $data['direccion_fiscal']['no_interior'],
                    'codigo_postal' => $data['direccion_fiscal']['codigo_postal'],
                    'colonia' => $data['direccion_fiscal']['colonia'],
                    'localidad_id' => $data['direccion_fiscal']['localidad_id'] ? $data['direccion_fiscal']['localidad_id'] : null,
                    'municipio_id' => $data['direccion_fiscal']['municipio_id'] ? $data['direccion_fiscal']['municipio_id'] : null,
                    'estado_id' => $data['direccion_fiscal']['estado_id'] ? $data['direccion_fiscal']['estado_id'] : null,
                    'referencia' => $data['direccion_fiscal']['referencia'],
                ]);
                if (count($this->cliente->direccion_fiscal->getDirty()) > 0) {
                    $attributes = Arr::except($this->cliente->direccion_fiscal->getDirty(), ['created_at', 'updated_at']);
                    activity('Direcci贸n Fiscal de Cliente Actualizada')
                        ->on($this->cliente->direccion_fiscal)
                        ->event('updated')
                        ->withProperty('attributes', Direccion::parseData($attributes))
                        ->withProperty('old', Direccion::parseData(Arr::only($this->cliente->direccion_fiscal->getOriginal(), array_keys($attributes))))
                        ->log('La Direcci贸n Fiscal del Cliente con RFC:' . $this->cliente->rfc . ' ha sido actualizada.');
                    $this->cliente->direccion_fiscal->save();
                }
            } else {
                $dir = Direccion::create([
                    'calle' => $data['direccion_fiscal']['calle'],
                    'no_exterior' => $data['direccion_fiscal']['no_exterior'],
                    'no_interior' => $data['direccion_fiscal']['no_interior'],
                    'codigo_postal' => $data['direccion_fiscal']['codigo_postal'],
                    'colonia' => $data['direccion_fiscal']['colonia'],
                    'localidad_id' => $data['direccion_fiscal']['localidad_id'] ? $data['direccion_fiscal']['localidad_id'] : null,
                    'municipio_id' => $data['direccion_fiscal']['municipio_id'] ? $data['direccion_fiscal']['municipio_id'] : null,
                    'estado_id' => $data['direccion_fiscal']['estado_id'] ? $data['direccion_fiscal']['estado_id'] : null,
                    'referencia' => $data['direccion_fiscal']['referencia'],
                ]);
                $this->cliente->direccion_fiscal_id = $dir->id;
                $this->cliente->save();

                activity("Direcci贸n Fiscal de Cliente Creada")
                    ->on($dir)
                    ->event('created')
                    ->withProperties(Direccion::parseData(Arr::except($dir->toArray(), ['updated_at'])))
                    ->log('La Direcci贸n Fiscal del Cliente con RFC: ' . $this->cliente->rfc . ' ha sido creada.');
            }

            $this->emit('show-toast', 'Cliente guardado.');
            if ($this->scope) {
                if ($this->cliente->wasRecentlyCreated) {
                    $this->emitTo($this->scope, 'cliente-created', $this->cliente->id);
                } else {
                    $this->emitTo($this->scope, 'cliente-updated', $this->cliente->id);
                }
            } else {
                $this->emit('$refresh');
            }
            DB::commit();
            $this->emit('closeModal');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error($e->getMessage());
            $this->emit('show-toast', 'Ocurrio un error. ' . $e->getMessage(), 'danger');
        }
    }

    public function init()
    {
        if ($this->direccion_fiscal['estado_id']) {
            $estado = Estado::find($this->direccion_fiscal['estado_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-estado_id", ['data' => [$estado->only('id', 'text')], 'term' => '', 'value' => $estado->id]);
        }
        if ($this->direccion_fiscal['localidad_id']) {
            $localidad = Localidad::find($this->direccion_fiscal['localidad_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-localidad_id", ['data' => [$localidad->only('id', 'text')], 'term' => '', 'value' => $localidad->id]);
        }
        if ($this->direccion_fiscal['municipio_id']) {
            $municipio = Municipio::find($this->direccion_fiscal['municipio_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-municipio_id", ['data' => [$municipio->only('id', 'text')], 'term' => '', 'value' => $municipio->id]);
        }
    }
}
