<?php

namespace App\Http\Livewire\Clientes;

use App\Http\Livewire\Layouts\Modal;
use App\Models\Cliente;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Livewire\WithPagination;

class Search extends Modal
{
    use WithPagination;

    public $scope;
    public $page = 1;
    public $perPage = 10;
    public $perPages = [10, 25, 50, 100];
    public $search;
    public $sort = 'Nombre Comercial';
    public $sorts = ['Nombre Comercial', 'Razón Social', 'Teléfono'];
    public $cliente;

    protected $listeners = ['$refresh', 'client_clicked' => 'clientClicked', 'cliente-created' => 'AddCliente'];

    public function render()
    {
        $clientes = $this->query();
        $total = $clientes->count();
        $records = $clientes->forPage($this->page, $this->perPage);
        $clientes = new LengthAwarePaginator($records, $total, $this->perPage, $this->page);
        return view('livewire.ventas.clientes.search', [
            'clientes' => $clientes,
        ]);
    }

    public static function modalMaxWidthClass(): string
    {
        return 'modal-xl'; // TODO: Change the autogenerated stub
    }

    public function query()
    {
        $query = DB::table('tb_empresas')
            ->select('id', 'es_cliente', 'nombre_comercial', 'razon_social', 'telefono')
            ->where('es_cliente', 1);

        $clientes = $query->get()->map(function ($element) {
            return (array)$element;
        })->toArray();

        $records_final = collect();

        foreach ($clientes as $cliente) {
            $cliente = Cliente::decryptInfo($cliente);

            if (!$this->search
                || Str::contains(Str::upper($cliente['nombre_comercial']), Str::upper($this->search))
                || Str::contains(Str::upper($cliente['razon_social']), Str::upper($this->search))
                || Str::contains(Str::upper($cliente['telefono']), Str::upper($this->search))
            ) {
                $records_final->push($cliente);
            }
        }

        switch ($this->sort) {
            case 'Nombre Comercial':
                $records_final = $records_final->sortBy('nombre_comercial', SORT_NATURAL)->values();
                break;
            case 'Razón Social':
                $records_final = $records_final->sortBy('razon_social', SORT_NATURAL)->values();
                break;
            case 'Teléfono':
                $records_final = $records_final->sortBy('telefono', SORT_NATURAL)->values();
                break;
        }

        return $records_final;
    }

    public function getIsClientSelectedProperty()
    {
        return isset($this->cliente);
    }

    public function getSelectedClientProperty()
    {
        if (!$this->cliente)
            return null;
        return Cliente::decryptInfo($this->cliente);
    }

    public function clientClicked($id)
    {
        if ($this->cliente && $this->cliente->id == $id)
            $this->cliente = null;
        else{
            $this->cliente = Cliente::find($id) ?? null;
        }
    }

    public function isClienteSelected($id){
        return $this->cliente && $this->cliente->id == $id;
    }

    public function select()
    {
        $this->emitTo($this->scope, 'cliente-found', $this->cliente->id);
        $this->emit('closeModal');
    }

    public function AddCliente($id){
        $this->emit('$refresh');
    }
}
