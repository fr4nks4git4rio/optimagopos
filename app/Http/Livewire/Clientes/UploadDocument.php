<?php

namespace App\Http\Livewire\Ventas\Clientes;

use App\Http\Livewire\Layouts\Modal;
use App\Models\Administracion\CodificadoresGenerales\Operador;
use App\Models\Ventas\Empresa;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Storage;
use Livewire\WithFileUploads;

class UploadDocument extends Modal
{
    use WithFileUploads;

    public Empresa $cliente;

    public $documento;
    public $confirmModalDeleteClass = '';

    protected $listeners = ['$refresh', 'uploadDocumento', 'confirmRemoveDocument'];

    public function mount()
    {
        $this->cliente = Empresa::decryptEmpresaInfo($this->cliente);

        $this->documento = $this->cliente->documento;
    }

    public function render()
    {
        return view('livewire.ventas.clientes.upload-document');
    }

    public static function modalMaxWidthClass(): string
    {
        return 'modal-md'; // TODO: Change the autogenerated stub
    }

    public function getDocumentoNOmbreProperty(){
        if($this->documento){
            return explode("/", $this->documento)[count(explode("/", $this->documento))-1];
        }
        return '';
    }

    public function haveDocument()
    {
        return $this->documento != '';
    }

    public function uploadDocumento()
    {
        if ($this->documento) {
            $element = $this->documento;
            $nombre = $element->getClientOriginalName();
            $src = $element->storeAs('documentos/documentos_clientes/' . $this->cliente->id, $nombre, 'public');

            if ($this->cliente->documento) {
                $log_description = "El usuario: '" . user()->nombre_completo . "' modificó el Documento del Cliente: '" . $this->cliente->nombre_comercial . "'.";
                $data = [
                    'old' => [
                        'src' => 'storage/' . $this->cliente->documento
                    ],
                    'attributes' => [
                        'src' => 'storage/' . $src
                    ]
                ];
            } else {
                $log_description = "El usuario '" . user()->nombre_completo . "' subió el Documento del Cliente '" . $this->cliente->nombre_comercial . "'.";

                $data = [
                    'src' => 'storage/' . $src
                ];
            }

            $this->cliente->documento = $src;
            $this->cliente->save();

            activity('Documento de Cliente')->on($this->cliente)
                ->withProperties($data)
                ->withProperty('uploaded_by', user()->nombre_completo)
                ->log($log_description);

            $this->documento = $src;
        }
    }

    public function confirmRemoveDocument()
    {
        if($this->cliente->documento) {
            $this->confirmModalDeleteClass = 'show';
        }else{
            $this->removeDocumento();
        }
    }

    public function removeDocumento()
    {
        Storage::disk('public')->delete($this->documento);
        $this->documento = '';
        if ($this->cliente->documento) {
            activity('Documento de Cliente')->on($this->cliente)
                ->log("El usuario '" . user()->nombre_completo . "' eliminó el Documento del Cliente '" . Crypt::decrypt($this->cliente->nombre_comercial) . "'.");
            $this->cliente->documento = null;
            $this->cliente->save();
        }
        $this->confirmModalDeleteClass = '';
    }
}
