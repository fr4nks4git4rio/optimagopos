<?php

namespace App\Http\Livewire\Sucursales;

use App\Http\Livewire\Layouts\Modal;
use App\Models\RegimenFiscal;
use App\Models\Direccion;
use App\Models\Estado;
use App\Models\Localidad;
use App\Models\Municipio;
use App\Models\Cliente;
use App\Models\Sucursal;
use App\Rules\RfcRule;
use App\Rules\RuleUnique;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Livewire\WithFileUploads;

class Save extends Modal
{
    use WithFileUploads;

    public $scope = null;
    public Sucursal $sucursal;
    public $nombre_comercial;
    public $razon_social;
    public $rfc;
    public $correo;
    public $telefono;
    public $cliente_id;
    public $regimen_fiscal_id;
    public $direccion_fiscal;
    public $logo;
    public $logo_src;

    public $regimenesFiscales = [];
    public $estados = [];

    protected $listeners = ['$refresh'];

    public function mount()
    {
        $this->regimenesFiscales = RegimenFiscal::orderBy('codigo')->get()->map->only('label', 'value');

        if (!isset($this->sucursal)) {
            $this->sucursal = new Sucursal();
            if (user()->is_admin)
                $this->cliente_id = user()->cliente_id;
        } else {
            $this->sucursal = Sucursal::decryptInfo($this->sucursal);
            $this->nombre_comercial = $this->sucursal->nombre_comercial;
            $this->razon_social = $this->sucursal->razon_social;
            $this->rfc = $this->sucursal->rfc;
            $this->correo = $this->sucursal->correo;
            $this->telefono = $this->sucursal->telefono;
            $this->regimen_fiscal_id = $this->sucursal->regimen_fiscal_id;
            $this->cliente_id = $this->sucursal->cliente_id;
            $this->logo = $this->sucursal->logo_uri;
            $this->logo_src = $this->logo;
        }
        $this->direccion_fiscal = $this->sucursal->direccion_fiscal->toArray();
        $this->estados = get_estados_mexico();
    }

    public static function modalMaxWidthClass(): string
    {
        return 'modal-xl'; // TODO: Change the autogenerated stub
    }

    public function render()
    {
        return view('livewire.sucursales.save');
    }

    public function getWithScopeProperty()
    {
        return $this->scope != null;
    }

    public function hydrate()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function updated()
    {
        $this->dispatchBrowserEvent('reApplySelect2');
        $this->init();
    }

    public function rules()
    {
        $collection = DB::table('tb_sucursales')
            ->select('id', 'nombre_comercial', 'razon_social', 'rfc', DB::raw('0 as decrypted'))
            ->get();
        $collection->map(function ($sucursal) {
            $sucursal = Sucursal::decryptInfo($sucursal);
        });
        $tipo_persona = 'ambas';
        if ($this->regimen_fiscal_id) {
            if ($this->regimen_fiscal_id == 9)
                $tipo_persona = 'persona_fisica';
            else
                $tipo_persona = 'persona_moral';
        }
        return [
            'nombre_comercial' => ['required', new RuleUnique($collection, $this->sucursal->id)],
            'razon_social' => ['required', new RuleUnique($collection, $this->sucursal->id)],
            'rfc' => ['required', new RuleUnique($collection, $this->sucursal->id), new RfcRule($tipo_persona)],
            'correo' => ['required'],
            'telefono' => ['nullable'],
            'cliente_id' => ['required', 'exists:tb_clientes,id'],
            'regimen_fiscal_id' => ['required', 'exists:tb_regimen_fiscales,id'],
            'direccion_fiscal.codigo_postal' => ['required'],
            'direccion_fiscal.calle' => 'nullable',
            'direccion_fiscal.no_exterior' => 'nullable',
            'direccion_fiscal.no_interior' => 'nullable',
            'direccion_fiscal.colonia' => 'nullable',
            'direccion_fiscal.localidad_id' => 'nullable',
            'direccion_fiscal.municipio_id' => 'nullable',
            'direccion_fiscal.estado_id' => 'nullable',
            'direccion_fiscal.referencia' => 'nullable'
        ];
    }

    public function messages()
    {
        return [
            'nombre_comercial.required' => 'Campo requerido',
            'razon_social.required' => 'Campo requerido',
            'rfc.required' => 'Campo requerido',
            'correo.required' => 'Campo requerido',
            'cliente_id.required' => 'Campo requerido',
            'cliente_id.exists' => 'Cliente no encontrado',
            'regimen_fiscal_id.required' => 'Campo requerido',
            'regimen_fiscal_id.exists' => 'Régimen Fiscal no encontrado',
            'direccion_fiscal.codigo_postal.required' => 'Campo requerido.'
        ];
    }

    public function save()
    {
        $data = $this->validate($this->rules(), $this->messages());
        DB::beginTransaction();
        try {
            $data['rfc'] = strtoupper(str_replace(' ', '', $data['rfc']));
            $data = Sucursal::encryptInfo($data);

            $this->sucursal->fill(Arr::only($data, [
                'nombre_comercial',
                'razon_social',
                'rfc',
                'correo',
                'telefono',
                'cliente_id',
                'regimen_fiscal_id'
            ]))->save();

            if ($this->sucursal->direccion_fiscal()->exists()) {
                $this->sucursal->direccion_fiscal->fill([
                    'calle' => $data['direccion_fiscal']['calle'],
                    'no_exterior' => $data['direccion_fiscal']['no_exterior'],
                    'no_interior' => $data['direccion_fiscal']['no_interior'],
                    'codigo_postal' => $data['direccion_fiscal']['codigo_postal'],
                    'colonia' => $data['direccion_fiscal']['colonia'],
                    'localidad_id' => $data['direccion_fiscal']['localidad_id'],
                    'municipio_id' => $data['direccion_fiscal']['municipio_id'],
                    'estado_id' => $data['direccion_fiscal']['estado_id'],
                    'referencia' => $data['direccion_fiscal']['referencia'],
                ]);
                if (count($this->sucursal->direccion_fiscal->getDirty()) > 0) {
                    $attributes = Arr::except($this->sucursal->direccion_fiscal->getDirty(), ['created_at', 'updated_at']);
                    activity('Dirección Fiscal de Sucursal Actualizada')
                        ->on($this->sucursal->direccion_fiscal)
                        ->event('updated')
                        ->withProperty('attributes', Direccion::parseData($attributes))
                        ->withProperty('old', Direccion::parseData(Arr::only($this->sucursal->direccion_fiscal->getOriginal(), array_keys($attributes))))
                        ->log('La Dirección Fiscal de la Sucursal con RFC: ' . $this->sucursal->rfc . ' ha sido actualizada.');
                    $this->sucursal->direccion_fiscal->save();
                }
            } else {
                $dir = Direccion::create([
                    'calle' => $data['direccion_fiscal']['calle'],
                    'no_exterior' => $data['direccion_fiscal']['no_exterior'],
                    'no_interior' => $data['direccion_fiscal']['no_interior'],
                    'codigo_postal' => $data['direccion_fiscal']['codigo_postal'],
                    'colonia' => $data['direccion_fiscal']['colonia'],
                    'localidad_id' => $data['direccion_fiscal']['localidad_id'],
                    'municipio_id' => $data['direccion_fiscal']['municipio_id'],
                    'estado_id' => $data['direccion_fiscal']['estado_id'],
                    'referencia' => $data['direccion_fiscal']['referencia'],
                ]);
                $this->sucursal->direccion_fiscal_id = $dir->id;
                $this->sucursal->save();

                activity("Dirección Fiscal de Sucursal Creada")
                    ->on($dir)
                    ->event('created')
                    ->withProperties(Direccion::parseData(Arr::except($dir->toArray(), ['updated_at'])))
                    ->log('La Dirección Fiscal de la Sucursal con RFC: ' . $this->sucursal->rfc . ' ha sido creada.');
            }

            if ($this->logo && !is_string($this->logo)) {
                $ext = $this->logo->extension();
                $nombre = Str::uuid() . ".$ext";
                $this->logo->storeAs('', $nombre, 'logos');
                $this->sucursal->logo = $nombre;
            } else if ($this->logo == '' || $this->logo == null) {
                if ($this->sucursal->logo && Storage::disk('logos')->exists($this->sucursal->logo)) {
                    Storage::disk('logos')->delete($this->sucursal->logo);
                }
                $this->sucursal->logo = null;
            }
            $this->sucursal->save();

            $this->emit('show-toast', 'Sucursal guardada.');
            if ($this->scope) {
                if ($this->sucursal->wasRecentlyCreated) {
                    $this->emitTo($this->scope, 'sucursal-created', $this->sucursal->id);
                } else {
                    $this->emitTo($this->scope, 'sucursal-updated', $this->sucursal->id);
                }
            } else {
                $this->emit('$refresh');
            }
            DB::commit();
            $this->emit('closeModal');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error($e->getMessage());
            $this->emit('show-toast', 'Ocurrio un error. ' . $e->getMessage(), 'danger');
        }
    }

    public function init()
    {
        if ($this->cliente_id) {
            $cliente = Cliente::find($this->cliente_id);
            $nombre = Crypt::decrypt($cliente->nombre_comercial);
            $this->dispatchBrowserEvent("set-data-cliente_id", ['data' => [['id' => $cliente->id, 'text' => $nombre]], 'term' => '', 'value' => $cliente->id]);
        }
        if ($this->direccion_fiscal['estado_id']) {
            $estado = Estado::find($this->direccion_fiscal['estado_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-estado_id", ['data' => [$estado->only('id', 'text')], 'term' => '', 'value' => $estado->id]);
        }
        if ($this->direccion_fiscal['localidad_id']) {
            $localidad = Localidad::find($this->direccion_fiscal['localidad_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-localidad_id", ['data' => [$localidad->only('id', 'text')], 'term' => '', 'value' => $localidad->id]);
        }
        if ($this->direccion_fiscal['municipio_id']) {
            $municipio = Municipio::find($this->direccion_fiscal['municipio_id']);
            $this->dispatchBrowserEvent("set-data-direccion_fiscal-municipio_id", ['data' => [$municipio->only('id', 'text')], 'term' => '', 'value' => $municipio->id]);
        }
    }

    public function removeLogo()
    {
        $this->logo = '';
    }

    public function getHasLogoProperty()
    {
        return $this->logo != '';
    }
}
